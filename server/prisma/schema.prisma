// Prisma schema for Gemalery

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  staff
  customer
}

enum ChannelKey {
  web
  tokopedia
  shopee
  tiktok
  offline
}

enum StockMovementType {
  IN
  OUT
  ADJUST
  TRANSFER
}

enum OrderStatus {
  pending
  paid
  fulfilled
  completed
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  customer  Customer?
}

model Customer {
  id        String             @id @default(cuid())
  userId    String?            @unique
  user      User?              @relation(fields: [userId], references: [id])
  name      String
  phone     String?
  email     String?
  addresses CustomerAddress[]
  orders    Order[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model CustomerAddress {
  id              String   @id @default(cuid())
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  label           String?
  recipient_name  String
  recipient_phone String
  address_line    String
  province        String?
  city            String?
  subdistrict     String?
  postal_code     String?
  lat             Float?
  lng             Float?
  google_place_id String?
  is_default      Boolean  @default(false)
  is_deleted      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([customerId])
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id          String         @id @default(cuid())
  supplierId  String
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  status      String         // draft, ordered, received, cancelled
  orderedAt   DateTime?
  receivedAt  DateTime?
  notes       String?
  items       PurchaseItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PurchaseItem {
  id                     String         @id @default(cuid())
  purchaseOrderId        String
  purchaseOrder          PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])
  productVariantId       String
  productVariant         ProductVariant @relation(fields: [productVariantId], references: [id])
  qty                    Int
  unit_cost              Decimal        @db.Decimal(12, 2)
  operational_cost_unit  Decimal        @db.Decimal(12, 2)
  landed_cost_unit       Decimal        @db.Decimal(12, 2)
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String?
  images      Json?
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductVariant {
  id                            String            @id @default(cuid())
  productId                     String
  product                       Product           @relation(fields: [productId], references: [id])
  sku                           String            @unique
  barcode                       String?
  weight_gram                   Int               @default(0)
  stock_on_hand                 Int               @default(0)
  price                         Decimal           @db.Decimal(12, 2)
  default_purchase_price        Decimal           @db.Decimal(12, 2)
  default_operational_cost_unit Decimal           @db.Decimal(12, 2)
  cogs_current                  Decimal           @db.Decimal(12, 2)
  inventoryLevels               InventoryLevel[]
  // relations
  purchaseItems                 PurchaseItem[]
  stockMovements                StockMovement[]
  orderItems                    OrderItem[]
  costTemplateLinks             VariantCostTemplateLink[]
  createdAt                     DateTime          @default(now())
  updatedAt                     DateTime          @updatedAt
}

model Warehouse {
  id        String           @id @default(cuid())
  name      String
  address   String?
  levels    InventoryLevel[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model InventoryLevel {
  id              String         @id @default(cuid())
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  warehouseId      String
  warehouse        Warehouse      @relation(fields: [warehouseId], references: [id])
  quantity         Int            @default(0)

  @@unique([productVariantId, warehouseId])
}

model StockMovement {
  id              String            @id @default(cuid())
  productVariantId String
  productVariant   ProductVariant    @relation(fields: [productVariantId], references: [id])
  type            StockMovementType
  quantity        Int
  unit_cost_applied Decimal?        @db.Decimal(12, 2)
  ref_table       String?
  ref_id          String?
  createdAt       DateTime          @default(now())

  @@index([productVariantId])
}

model Channel {
  id    String     @id @default(cuid())
  key   ChannelKey @unique
  name  String
  // relations
  orders Order[]
}

model Order {
  id               String      @id @default(cuid())
  channelId        String
  channel          Channel     @relation(fields: [channelId], references: [id])
  customerId       String?
  customer         Customer?   @relation(fields: [customerId], references: [id])
  status           OrderStatus
  subtotal         Decimal      @db.Decimal(12, 2)
  discount_total   Decimal      @db.Decimal(12, 2)
  fees_total       Decimal      @db.Decimal(12, 2)
  shipping_method  String?
  shipping_cost    Decimal      @db.Decimal(12, 2)
  shipping_address_snapshot Json?
  items            OrderItem[]
  payments         Payment[]
  shipments        Shipment[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model OrderItem {
  id               String         @id @default(cuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  qty              Int
  price            Decimal        @db.Decimal(12, 2)
  cogs_snapshot    Decimal        @db.Decimal(12, 2)
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id])
  method    String
  amount    Decimal       @db.Decimal(12, 2)
  status    PaymentStatus
  ref       String?
  createdAt DateTime      @default(now())
}

model Expense {
  id        String   @id @default(cuid())
  category  String
  amount    Decimal  @db.Decimal(12, 2)
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
}

model OperationalCostTemplate {
  id        String                      @id @default(cuid())
  name      String
  active    Boolean                     @default(true)
  components OperationalCostComponent[]
  links     VariantCostTemplateLink[]
}

model OperationalCostComponent {
  id         String                   @id @default(cuid())
  templateId String
  template   OperationalCostTemplate  @relation(fields: [templateId], references: [id])
  name       String
  method     String                   // fixed | percent | per_weight
  value      Decimal                  @db.Decimal(12, 4)
}

model VariantCostTemplateLink {
  id         String                  @id @default(cuid())
  variantId  String
  variant    ProductVariant          @relation(fields: [variantId], references: [id])
  templateId String
  template   OperationalCostTemplate @relation(fields: [templateId], references: [id])

  @@unique([variantId, templateId])
}

model Integration {
  id        String   @id @default(cuid())
  channel   String
  name      String
  config    Json
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipment {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  carrier   String   // JNE
  service   String?
  awb       String
  status    String?
  last_checked_at DateTime?
  events    ShipmentEvent[]
}

model ShipmentEvent {
  id          String   @id @default(cuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id])
  code        String?
  description String?
  city        String?
  event_time  DateTime?
  raw         Json?
}

model Webhook {
  id        String   @id @default(cuid())
  channel   String
  url       String
  last_status String?
  last_delivery_at DateTime?
  createdAt DateTime @default(now())
}


